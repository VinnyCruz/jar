/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.swing;

import com.github.britooo.looca.api.core.Looca;
import com.github.britooo.looca.api.group.memoria.Memoria;
import com.github.britooo.looca.api.group.processador.Processador;
import com.github.britooo.looca.api.group.sistema.Sistema;
import com.mycompany.swing.config.ConexaoMySQL;
import com.mycompany.swing.config.ConexaoMySQLInit;
import com.mycompany.swing.config.ConexaoSQLServer;
import com.mycompany.swing.dominio.Leitura;
import com.mycompany.swing.dominio.Notebook;
import static com.mycompany.swing.dominio.Table.isTableEmpty;
import static com.mycompany.swing.dominio.Table.notebookExistsForUser;
import static com.mycompany.swing.dominio.Table.notebookExistsForUserSqlServer;
import com.mycompany.swing.dominio.Usuario;
import static com.mycompany.swing.dominio.entidades.Alerta.insertAlerta;
import static com.mycompany.swing.dominio.entidades.Empresa.insertEmpresa;
import static com.mycompany.swing.dominio.entidades.Usuario.insertUsuario;
import com.mycompany.swing.repositorio.LeituraRepositorio;
import com.mycompany.swing.repositorio.NotebookRepositorioMYSQL;
import com.mycompany.swing.repositorio.NotebookRepositorioSQLServer;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;

/**
 *
 * @author victo
 */
public class Dados extends javax.swing.JFrame {

    /**
     * Creates new form dados
     */
    public Dados() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.black, java.awt.Color.black, null, null));

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(27, 152, 224));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Percentual de Memória:");

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(27, 152, 224));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Percentual de Processador:");

        jLabel3.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(27, 152, 224));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Data e Hora da Consulta");

        jLabel4.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel5.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel6.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jButton1.setBackground(new java.awt.Color(153, 153, 153));
        jButton1.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(27, 152, 224));
        jButton1.setText("Mostrar Dados");
        jButton1.setBorderPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(jButton1)
                .addContainerGap(142, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addGap(13, 13, 13)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(12, 12, 12)
                .addComponent(jLabel6)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String nomeDigitado = "Erick";
        String senhaDigitada = "Acessar@";
        System.out.println("Usuário:" + nomeDigitado);

        ConexaoSQLServer conexaoSQLServer = new ConexaoSQLServer();
        JdbcTemplate con = conexaoSQLServer.getConexaoDoBanco();

        System.out.println("Conexão com bando de dados SQL Server efetuada com sucesso!");

        ConexaoMySQLInit conexaoMySQLInit = new ConexaoMySQLInit();
        Connection connInit = conexaoMySQLInit.getJdbcTemplateMySQL();

        try {
            Statement statement = connInit.createStatement();

            String[] sqlCommands = {
                "CREATE DATABASE IF NOT EXISTS monitoramento",
                "USE monitoramento",
                "CREATE TABLE IF NOT EXISTS empresa ("
                + "idEmpresa INT PRIMARY KEY AUTO_INCREMENT,"
                + "nomeFantasia VARCHAR(45),"
                + "cnpj CHAR(15),"
                + "emailResponsavel VARCHAR(35),"
                + "telefone VARCHAR(45)"
                + ")",
                "CREATE TABLE IF NOT EXISTS usuario ("
                + "idUsuario INT AUTO_INCREMENT,"
                + "nome VARCHAR(45),"
                + "email VARCHAR(35),"
                + "senha VARCHAR(45),"
                + "tipo VARCHAR(45),"
                + "CHECK (tipo IN ('root','supervisor','suporte', 'atendente')),"
                + "fkEmpresa INT,"
                + "FOREIGN KEY (fkEmpresa) REFERENCES empresa (idEmpresa),"
                + "PRIMARY KEY(idUsuario, fkEmpresa)"
                + ")",
                "CREATE TABLE IF NOT EXISTS alerta ("
                + "idAlerta INT PRIMARY KEY AUTO_INCREMENT,"
                + "minCpu DECIMAL(10,2),"
                + "maxCpu DECIMAL(10,2),"
                + "minMemoria DECIMAL(10,2),"
                + "maxMemoria DECIMAL(10,2),"
                + "fkEmpresa INT,"
                + "FOREIGN KEY (fkEmpresa) REFERENCES empresa (idEmpresa)"
                + ")",
                "CREATE TABLE IF NOT EXISTS notebook ("
                + "idNotebook INT PRIMARY KEY AUTO_INCREMENT,"
                + "marca VARCHAR(45),"
                + "modelo VARCHAR(45),"
                + "capacidadeRam VARCHAR(45),"
                + "velocidadeCpu VARCHAR(45),"
                + "ipNotebook VARCHAR(45),"
                + "fkUsuario INT,"
                + "fkEmpresa INT,"
                + "FOREIGN KEY (fkUsuario) REFERENCES usuario (idUsuario),"
                + "FOREIGN KEY (fkEmpresa) REFERENCES empresa (idEmpresa)"
                + ")",
                "CREATE TABLE IF NOT EXISTS dadosCapturados ("
                + "idDadosCapturados INT PRIMARY KEY AUTO_INCREMENT,"
                + "porcentagemUsoMemoria INT,"
                + "porcentagemUsoProcessador INT,"
                + "dataHora DATETIME DEFAULT CURRENT_TIMESTAMP,"
                + "fkNotebook INT,"
                + "FOREIGN KEY (fkNotebook) REFERENCES notebook (idNotebook),"
                + "fkUsuario INT,"
                + "fkEmpresa INT,"
                + "FOREIGN KEY (fkUsuario) REFERENCES usuario (idUsuario),"
                + "FOREIGN KEY (fkEmpresa) REFERENCES empresa (idEmpresa)"
                + ")"
            };

            for (String sqlCommand : sqlCommands) {
                statement.executeUpdate(sqlCommand);
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    jLabel6.setVisible(true);
                    jLabel6.setText("Erro na pausa de thread.");
                }
            }

            if (isTableEmpty(connInit, "empresa")) {
                insertEmpresa(connInit, "Acflazz", "123456789012365", "Erick@gmail.com", "11974748563");
                insertEmpresa(connInit, "Apple", "30381362000130", "Nath.obi8@gmail.com", "11951534515");
                insertEmpresa(connInit, "google", "30381362000130", "juliana@gmail.com", "11951534515");
                insertEmpresa(connInit, "samsung", "30381362000130", "Matheus@gmail.com", "11951534515");
                insertEmpresa(connInit, "Linux", "30381362000130", "Pytel@gmail.com", "11951534515");
                insertEmpresa(connInit,"Tech", "30381362000130", "Rodrigo@gmail.com", "11951534515");
            }

            if (isTableEmpty(connInit, "usuario")) {
                insertUsuario(connInit, "Erick", "erick@gmail.com", "Acessar@", "root", 1);
                insertUsuario(connInit, "Nathalia", "nathalia.obi@gmail.com", "Acessar@", "root", 2);
                insertUsuario(connInit, "juliana", "juliana@gmail.com", "Acessar@", "atendente", 3);
                insertUsuario(connInit, "Matheus", "Matheus@gmail.com", "Acessar@", "root", 4);
                insertUsuario(connInit, "Pytel", "Pytel@gmail.com", "Acessar@", "suporte", 5);
                insertUsuario(connInit, "Digo", "Rodrigo@gmail.com", "Acessar@", "Supervisor", 6);

            }

            if (isTableEmpty(connInit, "alerta")) {
                insertAlerta(connInit, 20.0, 80.0, 20.0, 80.0, 1);
                insertAlerta(connInit, 15.0, 75.0, 15.0, 75.0, 2);

            }

            ConexaoMySQL conexaoMySQL = new ConexaoMySQL();
            Connection conn = conexaoMySQL.getJdbcTemplateMySQL();

            LeituraRepositorio leituraRepositorio = new LeituraRepositorio(con, conn);
            NotebookRepositorioMYSQL notebookRepositorioMYSQL = new NotebookRepositorioMYSQL(conn);
            NotebookRepositorioSQLServer notebookRepositorioSQLServer = new NotebookRepositorioSQLServer(con);

            Looca looca = new Looca();
            Sistema sistema = looca.getSistema();
            String marca = sistema.getFabricante();
            String modelo = sistema.getSistemaOperacional();

            Processador processador = looca.getProcessador();
            String velocidadeCpu = processador.getFrequencia().toString();

            String capacidadeRam = looca.getMemoria().getTotal().toString();

            try {
                Usuario listaUsuario = con.queryForObject("SELECT * FROM usuario WHERE nome = ? AND senha = ?",
                        new BeanPropertyRowMapper<>(Usuario.class), nomeDigitado, senhaDigitada);
                System.out.println("Usuário logado!");

                assert listaUsuario != null;
                int idUsuario = listaUsuario.getIdUsuario();

                String selectEmpresa = "SELECT fkEmpresa FROM usuario WHERE idUsuario = ?";
                Map<String, Object> empresaMap = con.queryForMap(selectEmpresa, listaUsuario.getIdUsuario());
                int foreignEmpresa = (int) empresaMap.get("fkEmpresa");

                if (notebookExistsForUserSqlServer(con, idUsuario)) {
                    System.out.println("Ja existe um notebook para esse usuario!");
                } else {
                    Notebook notebook = new Notebook(marca, modelo, capacidadeRam, velocidadeCpu, null, idUsuario, foreignEmpresa);
                    notebookRepositorioSQLServer.inserir(notebook);
                    System.out.println("Notebook inserido no SQL Server:" + notebook);

                }

                if (notebookExistsForUser(conn, idUsuario)) {
                    System.out.println("Ja existe um notebook para esse usuario!");
                } else {
                    Notebook notebook = new Notebook(marca, modelo, capacidadeRam, velocidadeCpu, null, idUsuario, foreignEmpresa);
                    try {
                        notebookRepositorioMYSQL.inserir(notebook);
                        System.out.println("Notebook inserido no MYSQL:" + notebook);
                    } catch (Exception e) {
                        System.out.println("Erro ao inserir notebook no MySQL");
                    }
                }

                String selectNotebook = "SELECT idNotebook, fkEmpresa FROM notebook WHERE fkUsuario = ?";
                Map<String, Object> notebookMap = con.queryForMap(selectNotebook, listaUsuario.getIdUsuario());
                int fkEmpresa = (int) notebookMap.get("fkEmpresa");
                int idNotebook = (int) notebookMap.get("idNotebook");

                new Timer().scheduleAtFixedRate(new TimerTask() {
                    final Looca looca = new Looca();
                    final Memoria memoria = looca.getMemoria();
                    final Processador processador = looca.getProcessador();

                    @Override
                    public void run() {
                        try {
                            System.out.println("Dados Capturados:");
                            int percentualMemoria = (int) ((memoria.getEmUso() * 100) / memoria.getTotal() * 0.50);
//                            System.out.println("Percentual de Memoria:" + percentualMemoria + "%");
                            jLabel4.setText(percentualMemoria + "%");

                            double percentualUso = processador.getUso() * 100;
                            int percentualCPU = (int) Math.round(percentualUso * 0.50);
                            int percentualCPUWithMin = Math.min(percentualCPU, 100);
//                            System.out.println("Percentual de CPU:" + percentualCPUWithMin + "%");
                            jLabel5.setText(percentualCPUWithMin + "%");

                            LocalDateTime dataHoraConsulta = LocalDateTime.now();
//                            System.out.println("Data e Hora da Consulta:" + dataHoraConsulta);
//                            System.out.println("--------------");
                            jLabel6.setText(dataHoraConsulta.toString());

                            Leitura leitura = new Leitura(
                                    percentualMemoria,
                                    percentualCPUWithMin,
                                    dataHoraConsulta,
                                    idNotebook,
                                    listaUsuario.getIdUsuario(),
                                    fkEmpresa
                            );

                            leituraRepositorio.inserir(leitura);

                        } catch (Exception e) {
                            Logger.getLogger(getClass().getName()).log(Level.SEVERE, "Erro ao capturar dados", e);
                        }
                    }
                }, 0, 10000);
            } catch (EmptyResultDataAccessException e) {
                jLabel6.setVisible(true);
                jLabel6.setText("Usuário ou senha incorretos.");
            }
        } catch (SQLException e) {
            jLabel6.setVisible(true);
            jLabel6.setText("Erro durante a execução!.");
            throw new RuntimeException(e);
        }
        
// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dados().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
